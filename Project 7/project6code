//
//  EADAppDelegate.h
//  TouchTracker
//
//  Created by Ryan on 7/5/15.
//  Copyright (c) 2015 Docs Playground. All rights reserved.
//

#import <UIKit/UIKit.h>

@interface EADAppDelegate : UIResponder <UIApplicationDelegate>

@property (strong, nonatomic) UIWindow *window;

@end
//
//  EADAppDelegate.m
//  TouchTracker
//
//  Created by Ryan on 7/5/15.
//  Copyright (c) 2015 Docs Playground. All rights reserved.
//

#import "EADAppDelegate.h"
#import "EADDrawViewController.h"

@implementation EADAppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    // Override point for customization after application launch.

    EADDrawViewController *dvc = [[EADDrawViewController alloc] init];
    self.window.rootViewController = dvc;

    self.window.backgroundColor = [UIColor whiteColor];
    [self.window makeKeyAndVisible];
    return YES;
}

- (void)applicationWillResignActive:(UIApplication *)application
{
    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
}

- (void)applicationDidEnterBackground:(UIApplication *)application
{
    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. 
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
}

- (void)applicationWillEnterForeground:(UIApplication *)application
{
    // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
}

- (void)applicationDidBecomeActive:(UIApplication *)application
{
    // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
}

- (void)applicationWillTerminate:(UIApplication *)application
{
    // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
}

@end
//
//  EADLine.h
//  TouchTracker
//
//  Created by Ryan on 7/5/15.
//  Copyright (c) 2015 Docs Playground. All rights reserved.
//

#import <Foundation/Foundation.h>

@interface EADLine : UIView

@property (nonatomic) CGPoint begin;
@property (nonatomic) CGPoint end;

@end
//
//  EADLine.m
//  TouchTracker
//
//  Created by Ryan on 7/5/15.
//  Copyright (c) 2015 Docs Playground. All rights reserved.
//

#import "EADLine.h"

@implementation EADLine

@end
//
//  EADDrawView.h
//  TouchTracker
//
//  Created by Ryan on 7/5/15.
//  Copyright (c) 2015 Docs Playground. All rights reserved.
//

#import <Foundation/Foundation.h>

@interface EADDrawView : UIView

@end
//
//  EADDrawView.m
//  TouchTracker
//
//  Created by Ryan on 7/5/15.
//  Copyright (c) 2015 Docs Playground. All rights reserved.
//

#import "EADDrawView.h"
#import "EADLine.h"

@interface EADDrawView ()

@property (nonatomic, strong) NSMutableDictionary *linesInProgress;
@property (nonatomic, strong) NSMutableArray *finishedLines;

@end

@implementation EADDrawView

- (void)drawRect:(CGRect)rect
{
    for (EADLine *line in self.finishedLines) {
        float redVal, greenVal, blueVal;
        float angle = atan2f(line.begin.y - line.end.y, line.end.x - line.begin.x);
        //normalize atan from [-pi,pi] to [0,2pi]
        if (angle < 0) {
            angle += 2 * M_PI;
        }
        
        //0 to 30deg
        if (angle > 0 && angle <= 1 * M_PI / 5.0)
        {
            redVal = 1;
            greenVal = 1 - [self normalizeAngle:angle from:1 * M_PI / 6.0 to:3 * M_PI / 6.0];
            blueVal = 0;
                       //30 to 90deg
        }
        else if (angle > 1 * M_PI / 6.0 && angle <= 3 * M_PI / 6.0)
        {
            redVal = 0;
            greenVal = [self normalizeAngle:angle from:7 * M_PI / 6.0 to:9 * M_PI / 6.0];
            blueVal = 1;
            
            //90 to 150deg
        }
        
        else if (angle > 3 * M_PI / 6.0 && angle <= 5 * M_PI / 6.0)
        {
            redVal = 0;
            greenVal = 1;
            blueVal = 1 - [self normalizeAngle:angle from:9 * M_PI / 6.0 to:11 * M_PI / 6.0];
            
            //150 to 210deg
        }
        else if (angle > 5 * M_PI / 6.0 && angle <= 7 * M_PI / 6.0)
        {
            redVal = 1 - [self normalizeAngle:angle from:5 * M_PI / 6.0 to:7 * M_PI / 6.0];
            greenVal = 0;
            blueVal = 1;
            //210 to 270deg
        }
        else if (angle > 7 * M_PI / 6.0 && angle <= 9 * M_PI / 6.0)
        {
            redVal = [self normalizeAngle:angle from:11 * M_PI / 6.0 to:13 * M_PI / 6.0];
            greenVal = 1;
            blueVal = 0;
            //270 to 330deg
        }
        else if (angle > 9 * M_PI / 6.0 && angle <= 11 * M_PI / 6.0)
        {
            //330 to 360deg
            
            redVal = [self normalizeAngle:angle from:-M_PI / 6.0 to:M_PI / 6.0];
            greenVal = 1;
            blueVal = 0;

        }
        else
        {
            redVal = 1;
            greenVal = 0;
            blueVal = [self normalizeAngle:angle from:3 * M_PI / 6.0 to:5 * M_PI / 6.0];
        }
        NSLog(@"angle:%f, R:%f, G:%f, B:%f", angle, redVal, greenVal, blueVal);
        [[UIColor colorWithRed:redVal green:greenVal blue:blueVal alpha:1] set];
        [self strokeLine:line];
    }
    [[UIColor redColor] set];
    for (EADLine *line in [self.linesInProgress allValues]) {
        [self strokeLine:line];
    }
}

- (float)normalizeAngle:(float)angle
                   from:(float)min
                     to:(float)max
{
    if (angle > max || angle < min) {
        NSLog(@"normalizeAngle out of range,");
    }
    
    return (angle - min) / (max - min);
}
- (instancetype)initWithFrame:(CGRect)r
{
    self = [super initWithFrame:r];

    if (self) {
        self.linesInProgress = [[NSMutableDictionary alloc] init];
        self.finishedLines = [[NSMutableArray alloc] init];
        self.backgroundColor = [UIColor grayColor];
        self.multipleTouchEnabled = YES;
    }

    return self;
}

- (void)strokeLine:(EADLine *)line
{
    UIBezierPath *bp = [UIBezierPath bezierPath];
    bp.lineWidth = 10;
    bp.lineCapStyle = kCGLineCapRound;

    [bp moveToPoint:line.begin];
    [bp addLineToPoint:line.end];
    [bp stroke];
}


- (void)touchesBegan:(NSSet *)touches
           withEvent:(UIEvent *)event
{
    // Let's put in a log statement to see the order of events
    NSLog(@"%@", NSStringFromSelector(_cmd));

    for (UITouch *t in touches) {
        CGPoint location = [t locationInView:self];

        EADLine *line = [[EADLine alloc] init];
        line.begin = location;
        line.end = location;

        NSValue *key = [NSValue valueWithNonretainedObject:t];
        self.linesInProgress[key] = line;
    }

    [self setNeedsDisplay];
}

- (void)touchesMoved:(NSSet *)touches
           withEvent:(UIEvent *)event
{
    // Let's put in a log statement to see the order of events
    NSLog(@"%@", NSStringFromSelector(_cmd));

    for (UITouch *t in touches) {
        NSValue *key = [NSValue valueWithNonretainedObject:t];
        EADLine *line = self.linesInProgress[key];

        line.end = [t locationInView:self];
    }

    [self setNeedsDisplay];
}

- (void)touchesEnded:(NSSet *)touches
           withEvent:(UIEvent *)event
{
    // Let's put in a log statement to see the order of events
    NSLog(@"%@", NSStringFromSelector(_cmd));

    for (UITouch *t in touches) {
        NSValue *key = [NSValue valueWithNonretainedObject:t];
        EADLine *line = self.linesInProgress[key];

        [self.finishedLines addObject:line];
        [self.linesInProgress removeObjectForKey:key];
    }

    [self setNeedsDisplay];
}

- (void)touchesCancelled:(NSSet *)touches
               withEvent:(UIEvent *)event
{
    // Let's put in a log statement to see the order of events
    NSLog(@"%@", NSStringFromSelector(_cmd));

    for (UITouch *t in touches) {
        NSValue *key = [NSValue valueWithNonretainedObject:t];
        [self.linesInProgress removeObjectForKey:key];
    }

    [self setNeedsDisplay];
}

@end
//
//  EADDrawViewController.h
//  TouchTracker
//
//  Created by Ryan on 7/5/15.
//  Copyright (c) 2015 Docs Playground. All rights reserved.
//

#import <Foundation/Foundation.h>

@interface EADDrawViewController : UIViewController

@end
//
//  EADDrawViewController.m
//  TouchTracker
//
//  Created by Ryan on 7/5/15.
//  Copyright (c) 2015 Docs Playground. All rights reserved.
//

#import "EADDrawViewController.h"
#import "EADDrawView.h"

@implementation EADDrawViewController

- (void)loadView
{
    self.view = [[EADDrawView alloc] initWithFrame:CGRectZero];
}

@end



//
//  EADAppDelegate.h
//  TouchTracker
//
//  Created by Ryan on 7/5/15.
//  Copyright (c) 2015 Docs Playground. All rights reserved.
//

#import <UIKit/UIKit.h>

@interface EADAppDelegate : UIResponder <UIApplicationDelegate>

@property (strong, nonatomic) UIWindow *window;

@end
//
//  EADAppDelegate.m
//  TouchTracker
//
//  Created by Ryan on 7/5/15.
//  Copyright (c) 2015 Docs Playground. All rights reserved.
//

#import "EADAppDelegate.h"
#import "EADDrawViewController.h"

@implementation EADAppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    self.window = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    // Override point for customization after application launch.

    EADDrawViewController *dvc = [[EADDrawViewController alloc] init];
    self.window.rootViewController = dvc;

    self.window.backgroundColor = [UIColor whiteColor];
    [self.window makeKeyAndVisible];
    return YES;
}

- (void)applicationWillResignActive:(UIApplication *)application
{
    // Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
    // Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
}

- (void)applicationDidEnterBackground:(UIApplication *)application
{
    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. 
    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
}

- (void)applicationWillEnterForeground:(UIApplication *)application
{
    // Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
}

- (void)applicationDidBecomeActive:(UIApplication *)application
{
    // Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
}

- (void)applicationWillTerminate:(UIApplication *)application
{
    // Called when the application is about to terminate. Save data if appropriate. See also applicationDidEnterBackground:.
}

@end
//
//  EADLine.h
//  TouchTracker
//
//  Created by Ryan on 7/5/15.
//  Copyright (c) 2015 Docs Playground. All rights reserved.
//

#import <Foundation/Foundation.h>

@interface EADLine : UIView

@property (nonatomic) CGPoint begin;
@property (nonatomic) CGPoint end;

@end
//
//  EADLine.m
//  TouchTracker
//
//  Created by Ryan on 7/5/15.
//  Copyright (c) 2015 Docs Playground. All rights reserved.
//

#import "EADLine.h"

@implementation EADLine

@end
//
//  EADDrawView.h
//  TouchTracker
//
//  Created by Ryan on 7/5/15.
//  Copyright (c) 2015 Docs Playground. All rights reserved.
//

#import <Foundation/Foundation.h>

@interface EADDrawView : UIView

@end
//
//  EADDrawView.m
//  TouchTracker
//
//  Created by Ryan on 7/5/15.
//  Copyright (c) 2015 Docs Playground. All rights reserved.
//

#import "EADDrawView.h"
#import "EADLine.h"

@interface EADDrawView () <UIGestureRecognizerDelegate>

@property (nonatomic, strong) UIPanGestureRecognizer *moveRecognizer;
@property (nonatomic, strong) NSMutableDictionary *linesInProgress;
@property (nonatomic, strong) NSMutableArray *finishedLines;

@property (nonatomic, weak) EADLine *selectedLine;

@end

@implementation EADDrawView

- (instancetype)initWithFrame:(CGRect)r
{
    self = [super initWithFrame:r];

    if (self) {
        self.linesInProgress = [[NSMutableDictionary alloc] init];
        self.finishedLines = [[NSMutableArray alloc] init];
        self.backgroundColor = [UIColor grayColor];
        self.multipleTouchEnabled = YES;

        UITapGestureRecognizer *doubleTapRecognizer =
            [[UITapGestureRecognizer alloc] initWithTarget:self
                                                    action:@selector(doubleTap:)];
        doubleTapRecognizer.numberOfTapsRequired = 2;
        doubleTapRecognizer.delaysTouchesBegan = YES;

        [self addGestureRecognizer:doubleTapRecognizer];

        UITapGestureRecognizer *tapRecognizer =
            [[UITapGestureRecognizer alloc] initWithTarget:self
                                                    action:@selector(tap:)];
        tapRecognizer.delaysTouchesBegan = YES;
        [tapRecognizer requireGestureRecognizerToFail:doubleTapRecognizer];
        [self addGestureRecognizer:tapRecognizer];

        UILongPressGestureRecognizer *pressRecognizer =
            [[UILongPressGestureRecognizer alloc] initWithTarget:self
                                                          action:@selector(longPress:)];
        [self addGestureRecognizer:pressRecognizer];

        self.moveRecognizer = [[UIPanGestureRecognizer alloc] initWithTarget:self
                                                                      action:@selector(moveLine:)];
        self.moveRecognizer.delegate = self;
        self.moveRecognizer.cancelsTouchesInView = NO;
        [self addGestureRecognizer:self.moveRecognizer];
    }

    return self;
}

- (BOOL)canBecomeFirstResponder
{
    return YES;
}

- (void)strokeLine:(EADLine *)line
{
    UIBezierPath *bp = [UIBezierPath bezierPath];
    bp.lineWidth = 10;
    bp.lineCapStyle = kCGLineCapRound;

    [bp moveToPoint:line.begin];
    [bp addLineToPoint:line.end];
    [bp stroke];
}

- (void)deleteLine:(id)sender
{
    // Remove the selected line from the list of _finishedLines
    [self.finishedLines removeObject:self.selectedLine];

    // Redraw everything
    [self setNeedsDisplay];
}

- (void)moveLine:(UIPanGestureRecognizer *)gr
{
    // If we have not selected a line, we do not do anything here
    if (!self.selectedLine) {
        return;
    }

    // When the pan recognizer changes its position...
    if (gr.state == UIGestureRecognizerStateChanged && ![[UIMenuController sharedMenuController] isMenuVisible]) {
        // How far has the pan moved?
        CGPoint translation = [gr translationInView:self];

        // Add the translation to the current beginning and end points of the line
        CGPoint begin = self.selectedLine.begin;
        CGPoint end = self.selectedLine.end;
        begin.x += translation.x;
        begin.y += translation.y;
        end.x += translation.x;
        end.y += translation.y;

        // Set the new beginning and end points of the line
        self.selectedLine.begin = begin;
        self.selectedLine.end = end;
    }

    
    //Redraw Screen
    
        [ self setNeedsDisplay];
        
        [gr setTranslation:CGPointZero inView:self];
}

- (void)drawRect:(CGRect)rect
{
    // Draw finished lines in black
    [[UIColor blackColor] set];
    for (EADLine *line in self.finishedLines) {
        [self strokeLine:line];
    }

    [[UIColor redColor] set];
    for (NSValue *key in self.linesInProgress) {
        [self strokeLine:self.linesInProgress[key]];
    }

    if (self.selectedLine) {
        [[UIColor greenColor] set];
        [self strokeLine:self.selectedLine];
    }
}

- (EADLine *)lineAtPoint:(CGPoint)p
{
    // Find a line close to p
    for (EADLine *l in self.finishedLines) {
        CGPoint start = l.begin;
        CGPoint end = l.end;

        // Check a few points on the line
        for (float t = 0.0; t <= 1.0; t += 0.05) {
            float x = start.x + t * (end.x - start.x);
            float y = start.y + t * (end.y - start.y);

            // If the tapped point is within 20 points, let's return this line
            if (hypot(x - p.x, y - p.y) < 20.0) {
                return l;
            }
        }
    }

    // If nothing is close enough to the tapped point, then we did not select a line
    return nil;
}

- (void)longPress:(UIGestureRecognizer *)gr
{
    if (gr.state == UIGestureRecognizerStateBegan) {
        CGPoint point = [gr locationInView:self];
        self.selectedLine = [self lineAtPoint:point];

        if (self.selectedLine) {
            [self.linesInProgress removeAllObjects];
        }
    } else if (gr.state == UIGestureRecognizerStateEnded) {
        self.selectedLine = nil;
    }
    [self setNeedsDisplay];
}

- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer
    shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)other
{
    if (gestureRecognizer == self.moveRecognizer) {
        return YES;
    }
    return NO;
}

- (void)tap:(UIGestureRecognizer *)gr
{
    NSLog(@"Recognized tap");

    CGPoint point = [gr locationInView:self];
    self.selectedLine = [self lineAtPoint:point];

    if (self.selectedLine) {

        // Make ourselves the target of menu item action messages
        [self becomeFirstResponder];

        // Grab the menu controller
        UIMenuController *menu = [UIMenuController sharedMenuController];

        // Create a new "Delete" UIMenuItem
        UIMenuItem *deleteItem = [[UIMenuItem alloc] initWithTitle:@"Delete"
                                                            action:@selector(deleteLine:)];

        menu.menuItems = @[deleteItem];

        // Tell the menu where it should come from and show it
        [menu setTargetRect:CGRectMake(point.x, point.y, 2, 2) inView:self];
        [menu setMenuVisible:YES animated:YES];
    } else {
        // Hide the menu if no line is selected
        [[UIMenuController sharedMenuController] setMenuVisible:NO animated:YES];
    }

    [self setNeedsDisplay];
}

- (void)doubleTap:(UIGestureRecognizer *)gr
{
    NSLog(@"Recognized Double Tap");
    [self.linesInProgress removeAllObjects];
    [self.finishedLines removeAllObjects];
    [self setNeedsDisplay];
}

- (void)touchesBegan:(NSSet *)touches
           withEvent:(UIEvent *)event
{
    // Let's put in a log statement to see the order of events
    NSLog(@"%@", NSStringFromSelector(_cmd));

    for (UITouch *t in touches) {
        CGPoint location = [t locationInView:self];

        EADLine *line = [[EADLine alloc] init];
        line.begin = location;
        line.end = location;

        NSValue *key = [NSValue valueWithNonretainedObject:t];
        self.linesInProgress[key] = line;
    }

    [self setNeedsDisplay];
}

- (void)touchesMoved:(NSSet *)touches
           withEvent:(UIEvent *)event
{
    // Let's put in a log statement to see the order of events
    NSLog(@"%@", NSStringFromSelector(_cmd));
    
    for (UITouch *t in touches) {
        NSValue *key = [NSValue valueWithNonretainedObject:t];
        EADLine *line = self.linesInProgress[key];

        line.end = [t locationInView:self];
    }

    [self setNeedsDisplay];
}

- (void)touchesEnded:(NSSet *)touches
           withEvent:(UIEvent *)event
{
    // Let's put in a log statement to see the order of events
    NSLog(@"%@", NSStringFromSelector(_cmd));

    for (UITouch *t in touches) {
        NSValue *key = [NSValue valueWithNonretainedObject:t];
        EADLine *line = self.linesInProgress[key];

        [self.finishedLines addObject:line];
        [self.linesInProgress removeObjectForKey:key];
    }

    [self setNeedsDisplay];
}

- (void)touchesCancelled:(NSSet *)touches
               withEvent:(UIEvent *)event
{
    // Let's put in a log statement to see the order of events
    NSLog(@"%@", NSStringFromSelector(_cmd));

    for (UITouch *t in touches) {
        NSValue *key = [NSValue valueWithNonretainedObject:t];
        [self.linesInProgress removeObjectForKey:key];
    }

    [self setNeedsDisplay];
}

@end
//
//  EADDrawViewController.h
//  TouchTracker
//
//  Created by Ryan on 7/5/15.
//  Copyright (c) 2015 Docs Playground. All rights reserved.
//

#import <Foundation/Foundation.h>

@interface EADDrawViewController : UIViewController

@end
//
//  EADDrawViewController.m
//  TouchTracker
//
//  Created by Ryan on 7/5/15.
//  Copyright (c) 2015 Docs Playground. All rights reserved.
//

#import "EADDrawViewController.h"
#import "EADDrawView.h"

@implementation EADDrawViewController

- (void)loadView
{
    self.view = [[EADDrawView alloc] initWithFrame:CGRectZero];
}

@end

